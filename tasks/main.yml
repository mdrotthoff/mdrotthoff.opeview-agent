---
# $Author$
# $Date$
# $Source$

# tasks file for opsview-agent
- name: Get the version of Opsview-Agent installed
  package:
    list:    opsview-agent
  register:  opsview_agent_current_version
# *** TODO:  Test fix opsview_agent_version collision  ***

- name: Set opsview_agent_current_version with the current version installed
  set_fact:
    opsview_agent_current_version:  "{{ opsview_agent_current_version.results[0].version }}"

- name: Display target OpsView Agent version
  debug:
    var:  opsview_agent_version

- name: Display source OpsView Agent package
  debug:
    var:  opsview_agent_package

- name: Install the OpsView agent if needed
  include_tasks: agent_install.yml
  when:          (opsview_agent_version is version(opsview_agent_current_version, '>'))

#- name: Check the version of the Opsview-Agent installed
#  block:
#    - name: Update OpsView Agent version
#      debug:
#        msg:  "Upgrading OpsView Agent version {{ opsview_agent_current_version }} to {{ opsview_agent_version }}"

##  - name: Calculate the OpsView Agent file name
##    set_fact:
##      opsview_agent_file_name:  "opsview/agents/{{ opsview_agent_package }}"
 
#    - name: Calculate the OpsView Agent source and target
#      set_fact:
#        opsview_source_file:      "files/opsview/agents/{{ opsview_agent_package }}"
#        opsview_destination_file: "/tmp/{{ opsview_agent_package }}"

##  - name: Copy OpsView Agent rpm file to server
##    copy:
##      src:   "{{ opsview_source_file }}"
##      dest:  "{{ opsview_destination_file }}"
##      owner: root
##      group: root
##      mode:  '0600'

#    - name: Copy OpsView Agent rpm file to server
#      copy:
#        src:   "files/opsview/agents/{{ opsview_agent_package }}"
#        dest:  "/tmp/{{ opsview_agent_package }}"
#        owner: root
#        group: root
#        mode:  '0600'

#    - name: Install the OpsView Agent package.
#      package:
#        name:         "/tmp/{{ opsview_agent_package }}"
#        state:        present
#      ignore_errors:  "{{ ansible_check_mode }}"
#      notify:         Restart OpsView

##  - name: Stop the OpsView Agent
##    service:
##      name:    "{{ opsview_agent_service}}"
##      state:   stopped
##      enabled: false
##    register:  opsview_service_stop

#  when:  (opsview_agent_version is version(opsview_agent_current_version, '>'))


- name: OpsView Agent version is current
  debug:
    msg:  "OpsView Agent version {{ opsview_agent_current_version }} is already current"
  when:   (opsview_agent_version is version(opsview_agent_current_version, '<='))

#- name: Start the OpsView Agent
#  service:
#    name:                           "{{ opsview_agent.service_name }}"
#    state:                          started
#    enabled:                        True
#  register:                         opsview_service_start

#- name: Dump variables at the end of opsview-db-deploy
#  debug:
#    var:                            opsview_service_start
